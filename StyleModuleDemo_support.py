#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Jun 08, 2023 05:26:26 AM CDT  platform: Linux
#    Jun 08, 2023 06:51:17 AM CDT  platform: Linux
#    Jun 08, 2023 07:37:26 AM CDT  platform: Linux

import sys
import os
import platform
import mystyles_notsodark

# ====================================
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

# ====================================

import StyleModuleDemo

_debug = True  # False to eliminate debug printing from callback functions.
location = StyleModuleDemo._location
programName = "Style Module Demo"
version = "0.1.0"


def main(*args):
    """Main entry point for the application."""
    global root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = StyleModuleDemo.Toplevel1(_top1)
    startup()
    root.mainloop()


def startup():
    global sty
    sty = ttk.Style()
    os_default_theme = sty.theme_use()
    last_style = os_default_theme
    imgpath = os.path.join(location, "Assets")
    mystyles_notsodark.create_styles(sty, imgpath)
    fix_TLabels()
    # Start the TProgressbar
    _w1.TProgressbar1.start()


def fix_TLabels():
    bgcolor = mystyles_notsodark.bgcolor
    print(f"{bgcolor=}")
    labelList = [_w1.TLabel1, _w1.TLabel2, _w1.TLabel3, _w1.TLabel4, _w1.TLabel5]
    for label in labelList:
        label.configure(background=bgcolor)


def on_btnExit(*args):
    if _debug:
        print("StyleModuleDemo_support.on_btnExit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    sys.exit()


def on_chk1(*args):
    if _debug:
        print("StyleModuleDemo_support.on_chk1")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    if _w1.che50.get() == 1:
        mystyles_notsodark.set_palette(_top1)
    else:
        mystyles_notsodark.reset_palette(_top1)
        fix_TLabels()


def on_disableWidgets(*args):
    if _debug:
        print("StyleModuleDemo_support.on_disableWidgets")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    widgetList = [
        _w1.TCheckbutton1,
        _w1.TCheckbutton2,
        _w1.TCheckbutton3,
        _w1.TRadiobutton1,
        _w1.TRadiobutton2,
        _w1.TRadiobutton3,
        _w1.Radiobutton1,
        _w1.Radiobutton2,
        _w1.Radiobutton3,
        _w1.Checkbutton3,
        _w1.Checkbutton4,
        _w1.Checkbutton5,
        _w1.TEntry1,
        _w1.TCombobox1,
        _w1.TScale1,
        _w1.Scale1,
        _w1.Entry1,
        _w1.Spinbox1,
        _w1.TSpinbox1,
    ]
    if _w1.che56.get() == 1:
        for widget in widgetList:
            widget.configure(state=DISABLED)
    else:
        for widget in widgetList:
            widget.configure(state=NORMAL)


def on_mnuFileExit(*args):
    if _debug:
        print("StyleModuleDemo_support.on_mnuFileExit")
        for arg in args:
            print("    another arg:", arg)
        sys.stdout.flush()
    sys.exit()


if __name__ == "__main__":
    StyleModuleDemo.start_up()
